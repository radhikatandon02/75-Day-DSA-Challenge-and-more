class Solution {
public:
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int n = jobDifficulty.size();
        if(n < d)
        {
            return -1;
        }
        int sum = 0;
        for(int i=0; i<n; i++)
        {
            sum += jobDifficulty[i];
        }
        if(sum == 0)
        {
            return 0;
        }
        vector<vector<int>> memo(d+1, vector<int>(n,0));
        solve(jobDifficulty, d, 0, memo);
        return memo[d][0];
    }
    void solve(vector<int> &jD, int d, int index, vector<vector<int>> &memo)
    {
        int n = jD.size();
        if(memo[d][index] != 0)
        {
            return;
        }

        if(d == 1)
        {
            int num = 0;
            for(int i=index; i<n; i++)
            {
                num = max(num, jD[i]);
            }
            memo[d][index] = num;
            return;
        }

        int maxDiff = jD[index];
        d--;
        int stop = n - index - d + 1;
        int ans = INT_MAX;
        for(int i=1; i<stop; i++)
        {
            maxDiff = max(maxDiff, jD[index + i - 1]);
            int other = memo[d][index + i];
            if(other == 0)
            {
                solve(jD, d, index + i, memo);
                other = memo[d][index + i];
            }
            ans = min(ans, other + maxDiff);
        }
        memo[d+1][index] = ans;
    }
};
