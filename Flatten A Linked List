/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* left, Node* right)
{
	if(left == NULL)
	{
		return right;
	}
	if(right == NULL)
	{
		return left;
	}
	Node* temp = new Node(-1);
	Node* ans = temp;
	while(left!=NULL && right!=NULL)
	{
		if(left->data < right->data)
		{
			temp->child = left;
			temp= temp->child;
			left = left->child;
		}
		else
		{
			temp->child = right;
			temp = temp->child;
			right = right->child;
		}
	}
	if(left)
	{
		temp->child = left;
	}
	else
	{
		temp->child = right;
	}

	
	return ans->child;
}
Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head == NULL || head->next == NULL)
	{
		return head;
	}
	Node* down = head;
	Node* right = head->next;

	right = flattenLinkedList(right);
	down->next = NULL;
	Node* ans = merge(down,right);
	return ans;
}
