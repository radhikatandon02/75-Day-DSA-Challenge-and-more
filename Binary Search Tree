#include <iostream>
#include<queue>
using namespace std;

class Node{
    public:
    int data;
    Node *left;
    Node *right;
    
    Node(int data)
    {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

void levelOrderTraversal(Node *root)
{
    queue<Node *> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty())
    {
        Node *temp = q.front();
        q.pop();
        
        if(temp == NULL)
        {
            cout << endl;
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            cout << temp->data << " ";
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}

void inOrder(Node *root)
{
    if(root == NULL){
        return;
    }
    
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

void preOrder(Node *root)
{
    if(root == NULL){
        return;
    }
    cout << root->data << " ";
    inOrder(root->left);
    inOrder(root->right);
}

void postOrder(Node *root)
{
    if(root == NULL){
        return;
    }
    
    inOrder(root->left);
    inOrder(root->right);
    cout << root->data << " ";
}

Node *insertIntoBST(Node *root, int data){
    //base case
    if(root == NULL)
    {
        root = new Node(data);
        return root;
    }
    if(data > root->data){
        root->right = insertIntoBST(root->right,data);
    }
    else
    {
        root->left = insertIntoBST(root->left,data);
    }
    
    return root;
}

int minBST(Node *root)
{
    Node *temp = root;
    while(temp->left != NULL){
        temp = temp->left;
    }
    return temp->data;
}

int maxBST(Node *root)
{
    Node *temp = root;
    while(temp->right != NULL){
        temp = temp->right;
    }
    return temp->data;
}

Node *deletionInBST(Node *root, int x)
{
    //base case
    if(root == NULL)
    {
        return root;
    }
    
    if(root->data == x)
    {
        //0 child 
        if(root->left == NULL && root->right == NULL)
        {
            delete root;
            return NULL;
        }
        //1 child 
        //left child 
        if(root->left != NULL && root->right == NULL)
        {
            Node *temp = root->left;
            delete root;
            return temp;
        }
        
        //right child
        if(root->left == NULL && root->right != NULL)
        {
            Node *temp = root->right;
            delete root;
            return temp;
        }
        
        //2 child
        if(root->left != NULL && root->right != NULL)
        {
            int min = minBST(root->right);
            root->data = min;
            root->right = deletionInBST(root->right, min);
            return root;
            
        }
    }
    else if(root->data > x)
    {
        root->left = deletionInBST(root->left, x);
        return root;
    }
    else{
        root->right = deletionInBST(root->right, x);
        return root;
    }
}

void takeInput(Node *&root){
    int data;
    cin >> data;
    
    while(data!=-1)
    {
        root = insertIntoBST(root,data);
        cin >> data;
    }
}

int main()
{
    Node *root = NULL;
    
    cout << "Enter data to create BST: ";
    takeInput(root);
    
    cout << "Printing the BST: " << endl;
    levelOrderTraversal(root);
    
    cout << endl << "Printing Inorder: " << endl;
    inOrder(root);
    
    cout << endl << "Printing Preorder: " << endl;
    preOrder(root);
    
    cout << endl << "Printing Postorder: " << endl;
    postOrder(root);
    
    cout << endl << "Min value in BST: " << minBST(root) <<endl;
    cout << endl << "Max value in BST: " << maxBST(root) <<endl;

    cout << "Enter a node to Delete: " ;
    int nodeToDelete;
    cin >> nodeToDelete;
    root = deletionInBST(root,nodeToDelete);
    
    cout << "Printing the BST after deletion: " << endl;
    levelOrderTraversal(root);
}
