//Solution with O(N^2) Time Complexity :
class Solution{
    private:
    int height(Node *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        
        int h1 = height(root->left);
        int h2 = height(root->right);
        
        int ans = max(h1,h2)+1;
        return ans;
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        //  Your Code here
        if(root == NULL)
        {
            return true;
        }
        
        bool left = isBalanced(root->left);
        bool right = isBalanced(root->right);
        
        bool diff = abs(height(root->left)-height(root->right)) <=1;
        
        if(left && right && diff)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};

//Optimised Solution:
class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    pair<bool,int> isBalancedFast(Node *root)
    {
        if(root == NULL)
        {
            pair<bool,int> p = make_pair(true,0);
            return p;
        }
        pair<bool,int> leftPart = isBalancedFast(root->left);
        pair<bool,int> rightPart = isBalancedFast(root->right);

        bool left = leftPart.first;
        bool right = rightPart.first;
        
        bool diff = abs(leftPart.second-rightPart.second) <=1;
        
        pair<bool,int> ans;
        ans.second = max(leftPart.second,rightPart.second)+1;
        if(left && right && diff)
        {
            ans.first = true;
        }
        else
        {
            ans.first = false;
        }
        return ans;
    }
    bool isBalanced(Node *root)
    {
        //  Your Code here
        return isBalancedFast(root).first;
    }
};
